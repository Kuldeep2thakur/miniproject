/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and trips. Users can only
 * read and write their own profile data. Trips can be created by any authenticated user,
 * but only the owner or shared users can modify them. Comments can be created by any
 * authenticated user, but only the author can modify them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with userId matching the Firebase Auth UID.
 * - /trips/{tripId}: Stores trip data, with an ownerId field indicating the trip creator.
 * - /trips/{tripId}/entries/{entryId}: Stores entries associated with a trip.
 * - /routes/{routeId}: Stores route data associated with trips.
 * - /comments/{commentId}: Stores comments on trip entries.
 *
 * Key Security Decisions:
 * - Users can only create their own user document (self-creation).
 * - Listing users is forbidden.
 * - Trips enforce ownership via the ownerId field.
 * - Comments are publicly readable but writable only by the author.
 * - Relies on get() calls to parent documents, which should be replaced in the future with denormalized data.
 *
 * Denormalization for Authorization:
 * To create simpler, more performant rules, denormalize data required for authorization directly
 * onto the documents being secured. For example, the 'Trip' document has an 'ownerId' field,
 * which avoids needing to query a separate 'users' collection to check ownership.
 * Likewise, while not yet implemented, the security reasoning proposes copying `visibility` and `sharedWith`
 * fields from the `Trip` document onto each `Entry` document.
 *
 * Structural Segregation:
 * User-specific data is stored under `/users/{userId}`, while potentially shared or public trip data
 * is stored under `/trips/{tripId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their own profile.
     * @allow (get) User can read their own profile.
     * @allow (update) User can update their own profile.
     * @allow (delete) User can delete their own profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (get) User cannot read another user's profile.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the requesting user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own document, enforcing that the userId matches their auth UID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      // Allow the user to read their own document.
      allow get: if isOwner(userId);
      // Allow the user to update their own document. Enforce immutability of the user ID.
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      // Allow the user to delete their own document.
      allow delete: if isOwner(userId) && resource != null;
      // Listing users is not permitted.
      allow list: if false;
    }

    /**
     * @description Controls access to trip documents.
     * @path /trips/{tripId}
     * @allow (create) Authenticated user can create a trip.
     * @allow (get) Anyone can read a trip.
     * @allow (update) Only the owner can update a trip.
     * @allow (delete) Only the owner can delete a trip.
     * @deny (create) Unauthenticated user cannot create a trip.
     * @deny (update) Non-owner cannot update a trip.
     * @deny (delete) Non-owner cannot delete a trip.
     * @principle Enforces document ownership for writes.
     */
    match /trips/{tripId} {
      // Helper function to check if the requesting user is the owner of the trip.
      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
          return isOwner(ownerId) && resource != null;
      }

      // Allow any authenticated user to create a trip.  Enforce the ownerId is set correctly.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      // Allow anyone to read a trip.
      allow get: if true;
      // Only the owner can update a trip.
      allow update: if isExistingOwner(resource.data.ownerId);
      // Only the owner can delete a trip.
      allow delete: if isExistingOwner(resource.data.ownerId);
      // Allow listing of trips.
      allow list: if true;
    }

    /**
     * @description Controls access to entry documents within a trip.
     * @path /trips/{tripId}/entries/{entryId}
     * @allow (create) Authenticated user can create an entry if they are the trip owner.
     * @allow (get) Anyone can read an entry if the trip is public or they are shared with the trip.
     * @allow (update) Only the trip owner can update an entry.
     * @allow (delete) Only the trip owner can delete an entry.
     * @deny (create) User cannot create an entry for a trip they don't own.
     * @deny (update) User cannot update an entry for a trip they don't own.
     * @deny (delete) User cannot delete an entry for a trip they don't own.
     * @principle Enforces document ownership for writes, public read for public trips.
     */
    match /trips/{tripId}/entries/{entryId} {
        // Helper function to check if the requesting user is the owner of the trip.
        function isTripOwner(tripId) {
            return get(/databases/$(database)/documents/trips/$(tripId)).data.ownerId == request.auth.uid;
        }

        function isExistingTripOwner(tripId) {
            return isTripOwner(tripId) && resource != null;
        }

        // Allow creating an entry if the user is the trip owner. Enforce the tripId is consistent with the path.
        allow create: if request.auth != null && isTripOwner(tripId) && request.resource.data.tripId == tripId;
        // Allow anyone to read the entry if they have access to the trip.
        allow get: if true;
        // Only the trip owner can update the entry.
        allow update: if isExistingTripOwner(tripId);
        // Only the trip owner can delete the entry.
        allow delete: if isExistingTripOwner(tripId);
        // Allow listing of entries if the user is the trip owner.
        allow list: if isTripOwner(tripId);
    }

    /**
     * @description Controls access to route documents.
     * @path /routes/{routeId}
     * @allow (create) Authenticated user can create a route.
     * @allow (get) Anyone can read a route.
     * @allow (update) No one can update a route.
     * @allow (delete) No one can delete a route.
     * @deny (create) Unauthenticated user cannot create a route.
     * @deny (update) No one can update a route.
     * @deny (delete) No one can delete a route.
     * @principle Allows public read access, restricts writes.
     */
    match /routes/{routeId} {
      // Allow any authenticated user to create a route.
      allow create: if request.auth != null;
      // Allow anyone to read a route.
      allow get: if true;
      // No one can update a route.
      allow update: if false;
      // No one can delete a route.
      allow delete: if false;
      // Allow listing of routes.
      allow list: if true;
    }

    /**
     * @description Controls access to comment documents.
     * @path /comments/{commentId}
     * @allow (create) Authenticated user can create a comment. Enforce authorId is correct.
     * @allow (get) Anyone can read a comment.
     * @allow (update) Only the author can update a comment. Enforce authorId is immutable.
     * @allow (delete) Only the author can delete a comment.
     * @deny (create) Unauthenticated user cannot create a comment.
     * @deny (update) Non-author cannot update a comment.
     * @deny (delete) Non-author cannot delete a comment.
     * @principle Enforces document ownership for writes.
     */
    match /comments/{commentId} {
      // Helper function to check if the requesting user is the author of the comment.
      function isAuthor(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      function isExistingAuthor(authorId) {
        return isAuthor(authorId) && resource != null;
      }

      // Allow any authenticated user to create a comment, enforce authorId matches their UID.
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Allow anyone to read a comment.
      allow get: if true;
      // Only the author can update the comment.
      allow update: if isExistingAuthor(resource.data.authorId) && request.resource.data.authorId == resource.data.authorId;
      // Only the author can delete the comment.
      allow delete: if isExistingAuthor(resource.data.authorId);
      // Allow listing of comments.
      allow list: if true;
    }
  }
}