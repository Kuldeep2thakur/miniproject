{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user profile in the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "displayName": {
          "type": "string",
          "description": "The display name of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile photo.",
          "format": "uri"
        },
        "bio": {
          "type": "string",
          "description": "A short biography or description of the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        },
        "privacyDefault": {
          "type": "string",
          "description": "Default privacy setting for the user's trips ('private', 'public', or 'friends')."
        },
        "timezone": {
          "type": "string",
          "description": "The timezone of the user."
        }
      },
      "required": [
        "id",
        "displayName",
        "email",
        "createdAt",
        "privacyDefault",
        "timezone"
      ]
    },
    "Trip": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Trip",
      "type": "object",
      "description": "Represents a travel trip logged by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the trip.",
          "format": "uuid"
        },
        "ownerId": {
          "type": "string",
          "description": "Reference to the User who owns this trip. (Relationship: User 1:N Trip)"
        },
        "title": {
          "type": "string",
          "description": "The title of the trip."
        },
        "startDate": {
          "type": "string",
          "description": "The start date of the trip.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "The end date of the trip.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the trip."
        },
        "coverPhoto": {
          "type": "string",
          "description": "URL of the cover photo for the trip.",
          "format": "uri"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the trip was created.",
          "format": "date-time"
        },
        "visibility": {
          "type": "string",
          "description": "The visibility setting of the trip ('private', 'public', or 'shared')."
        },
        "sharedWith": {
          "type": "array",
          "description": "An array of User IDs that this trip is shared with. (Relationship: User N:N Trip)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "ownerId",
        "title",
        "startDate",
        "endDate",
        "description",
        "createdAt",
        "visibility"
      ]
    },
    "Entry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Entry",
      "type": "object",
      "description": "Represents a single entry or journal entry within a trip.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the entry.",
          "format": "uuid"
        },
        "tripId": {
          "type": "string",
          "description": "Reference to the Trip this entry belongs to. (Relationship: Trip 1:N Entry)"
        },
        "title": {
          "type": "string",
          "description": "The title of the entry."
        },
        "content": {
          "type": "string",
          "description": "The content of the entry (rich text or markdown)."
        },
        "locationName": {
          "type": "string",
          "description": "The location name for the entry."
        },
        "locationLat": {
          "type": "number",
          "description": "The latitude of the location for the entry."
        },
        "locationLng": {
          "type": "number",
          "description": "The longitude of the location for the entry."
        },
        "media": {
          "type": "array",
          "description": "An array of URLs or storage paths to media files associated with the entry.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the entry was created.",
          "format": "date-time"
        },
        "visitedAt": {
          "type": "string",
          "description": "Timestamp indicating when the location was visited.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "tripId",
        "title",
        "content",
        "createdAt",
        "visitedAt",
        "locationName",
        "locationLat",
        "locationLng"
      ]
    },
    "Route": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Route",
      "type": "object",
      "description": "Represents the route taken during a trip.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the route.",
          "format": "uuid"
        },
        "tripId": {
          "type": "string",
          "description": "Reference to the Trip this route belongs to. (Relationship: Trip 1:N Route)"
        },
        "points": {
          "type": "array",
          "description": "An array of latitude, longitude, and timestamp points representing the route.",
          "items": {
            "type": "string"
          }
        },
        "distanceMeters": {
          "type": "number",
          "description": "The distance of the route in meters."
        },
        "polyline": {
          "type": "string",
          "description": "An encoded polyline representation of the route."
        }
      },
      "required": [
        "id",
        "tripId",
        "points",
        "distanceMeters"
      ]
    },
    "Comment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Comment",
      "type": "object",
      "description": "Represents a comment on a specific trip entry.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the comment.",
          "format": "uuid"
        },
        "entryId": {
          "type": "string",
          "description": "Reference to the Entry this comment belongs to. (Relationship: Entry 1:N Comment)"
        },
        "authorId": {
          "type": "string",
          "description": "Reference to the User who wrote the comment. (Relationship: User 1:N Comment)"
        },
        "text": {
          "type": "string",
          "description": "The text content of the comment."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the comment was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "entryId",
        "authorId",
        "text",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Only the authenticated user can read/write their own profile.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user (auth.uid)."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/trips/{tripId}",
        "definition": {
          "entityName": "Trip",
          "schema": {
            "$ref": "#/backend/entities/Trip"
          },
          "description": "Stores trip information owned by a specific user. Includes denormalized 'visibility' and 'sharedWith' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user (auth.uid) who owns the trip."
            },
            {
              "name": "tripId",
              "description": "The unique identifier of the trip."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/trips/{tripId}/entries/{entryId}",
        "definition": {
          "entityName": "Entry",
          "schema": {
            "$ref": "#/backend/entities/Entry"
          },
          "description": "Stores trip entries for a specific trip. Authorization is based on the parent trip's ownership and visibility.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the trip."
            },
            {
              "name": "tripId",
              "description": "The unique identifier of the trip."
            },
            {
              "name": "entryId",
              "description": "The unique identifier of the entry."
            }
          ]
        }
      },
      {
        "path": "/routes/{routeId}",
        "definition": {
          "entityName": "Route",
          "schema": {
            "$ref": "#/backend/entities/Route"
          },
          "description": "Stores route data associated with a specific trip.",
          "params": [
            {
              "name": "routeId",
              "description": "The unique identifier of the route."
            }
          ]
        }
      },
      {
        "path": "/comments/{commentId}",
        "definition": {
          "entityName": "Comment",
          "schema": {
            "$ref": "#/backend/entities/Comment"
          },
          "description": "Stores comments on trip entries.  Allows querying comments across entries and trips.",
          "params": [
            {
              "name": "commentId",
              "description": "The unique identifier of the comment."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability for the WanderLust application. We leverage path-based ownership for user-related data and denormalization where needed to avoid complex security rules involving `get()` calls. The core entities (Users, Trips, Entries, Routes, and Comments) are organized in a way that mirrors their relationships while optimizing for security and query performance.\n\n*   **/users/{userId}**: Stores user profiles.  Security rules will ensure that only the authenticated user can read and write their own profile.\n*   **/users/{userId}/trips/{tripId}**:  This path enforces strict ownership for trips. Only the owner (identified by `userId`) can create, update, or delete trips under their profile.  The `trip` documents include a `visibility` field, allowing the trip owner to set the trip as 'private', 'public', or 'shared'. The `sharedWith` field contains an array of user IDs that the trip is shared with. Security rules will allow reading based on these parameters.\n*   **/users/{userId}/trips/{tripId}/entries/{entryId}**:  This continues the ownership pattern, with entries nested under trips.  Security rules will be based on the parent trip's ownership and visibility settings. This structure is optimized for querying all entries for a specific trip.\n*   **/routes/{routeId}**: Stores route data. Route documents include a tripId field referencing the parent trip.  This segregation allows routes to be queried independently if needed (e.g., for route analysis across trips), while security rules will ensure that only the trip owner can create, update, or delete routes associated with their trips.\n*   **/comments/{commentId}**: Stores comments on entries. The comment document includes an `entryId` to reference the parent entry and the `authorId` to reference the author of the comment. Segregating comments into a top-level collection simplifies querying comments across all entries and trips, as well as enforcing security rules based on entry visibility.\n\nThis design achieves Authorization Independence by embedding all necessary authorization data (`visibility`, `sharedWith`, `ownerId`) directly into the `Trip` document. This eliminates the need for `get()` calls in security rules to check the parent document's access controls. QAPs are supported through structural segregation and the membership model: public trips are readable by anyone, private trips are readable by the owner, and shared trips are readable by users included in the `sharedWith` array."
  }
}